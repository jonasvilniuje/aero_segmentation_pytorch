kiek laiko
kiek nuotrauku
koks modelis

lyginamoji analize pvz deeplabui reikia x laiko ir y nuotrauku tam kad pasiekti S tiksluma, o unet reikia ....
reikia jau saugoti rezultatus - modelis, laikas, nuotrauku kiekis, gauti rezultatai - iou, f1, loss ...
galima sugalvoti metrika kuri nurodytu ar laivas rastas ar ne pagal tai kiek kaukeje laivo yra susegmentuota. 
Taip galima daryti, nes tai nera medicinine aplikacija

FOKUSAS:
daugiau konkrečios analizės, atsakyti į klausimus pvz. kaip daro įtaką modeliams epochų skaičius, batch_size, duomenų kiekis, ...
tam, kad tai padaryti, reikia sistemingai saugoti rezultatus.

0. reikia padaryt, kad galėtų paraleliai runnint keli model trainingai
Strategija: paduoti hiperparametrus kaip argumentus vietoj env.config failo. 
Tokiu būdu galima paleisti mokymasi 

1. braižyti grafikus su skirtingais hyperparametrais - kuris modelis yra greitesnis ar geitesnis su 1000, 2000, ..., 10000 duomenų.
1.1 po to galima išsirinkti tiksliausią modelį ir po to eksperimentuoti su juo

2. ieškoti galima balanso tarp laiko, tikslumo ir duomenų kiekio
2.1 nubraižyti chartus:
 iou nuo duomenų kiekio prikausomybę
 laiko nuo duomenu
 iou nuo batch_size
 SKIRINGIEMS modeliams

analizuoti:
kaip duomenu/batch_size kiekis įtakoja modelio apmokymo rezultatus ir kiek laiko užtrunka

tam reikia paleisti eksperimentus:
kiekvieną modelį (?, juk visi U-net pagrindu) su X kiekiu duomenų ir Y batch_size dydžiu.
deterministic:
u-net_baseline, 1000, 8
u-net_baseline, 1000, 16
u-net_baseline, 1000, 32
u-net_baseline, 1000, 64
u-net_baseline, 1000, 128

u-net_baseline, 5000, 8
u-net_baseline, 5000, 16
u-net_baseline, 5000, 32
u-net_baseline, 5000, 64
u-net_baseline, 5000, 128


non-deterministic:
??


iliustracijai galima paimti mask ir predicted mask ir parodyt IOU, paskaičiuoti IOU

--------------
atsitiktinumas:
--------------
problematika - skirtingi rezultatai su tais pačiais inputs
atkartojamumo sprendimo būdai - pliusai minusai vs 10 apmokymo vidurkio radimas

parodyti kokią įtaką turi mokymo atsitiktinumas galutiniam rezultatui

pagrįsti pasirinkimus: modelių (efficientnet-b1, resnet34), loss funkcijos



https://pytorch.org/docs/stable/notes/randomness.html
https://pytorch.org/docs/stable/data.html#torch.utils.data.get_worker_info
 
eksperimentai:
modeliai:
plain u-net
u-net + resnet34 encoder + pretrained weights
u-net + efficientnet encoder + pretrained weights
...

prioritetai:
tvarkingai saugoti duomenis - modelis, duomenu kiekis, config, gautos metrikos, tam kad po to braižyti grafikus ir lyginti rezultatus, ieškoti dėsningumo
pabandyti naudoti bibliotekų modelius +

______________
REZULTATAI:
--------------

Tyrimo pastebėta, kad naudojant tuos pačius modelius, duomenis ir hiperparametrus modelio apmokymo rezultatai skiriasi. Toks reiškinys vyksta todėl, kad PyTorch giliojo mokymo biblioteka naudoja CUDA biblioteką, kuri naudoja nedeterministinius algoritmus, leidžiančius pagreitinti modelio apmokymą, tačiau jų panaudojimas gali lemti ir skirtingus rezultatus. Norint užtikrinti, kad tyrimo rezultatai būtų kuo mažiau paveikti atsitiktinumo, yra svarbu, kad su vienoda įvestimi būtų pasiekiama vienoda išvestis. Todėl PyTorch parametrui torch.backends.cudnn.deterministic buvo priskirta False reikšmė, kuri leido pasiekti modelio apmokymo rezultatų pakartojamumą. 

HPC APLINKOJE:
Testiniai rezultatai prieš ir po nustatant torch.backends.cudnn.deterministic = True & # torch.backends.cudnn.benchmark = False.

Prieš:
model_name,time,epochs,parameter_count,fixed_train_size,fixed_valid_size,fixed_test_size,batch_size,training_time,iou,avg_loss,accuracy,precision,recall,f1_score
unet_baseline,10:16,50,1928417,1000,1000,1000,32,10:16,0.5909,0.7429,0.0251,0.9972,0.6604,0.8489
unet_baseline,10:00,50,1928417,1000,1000,1000,32,10:00,0.5799,0.7341,0.0265,0.9972,0.6717,0.8092
unet_baseline,10:41,50,1928417,1000,1000,1000,32,10:41,0.4153,0.5869,0.031,0.9938,0.4275,0.9357
unet_baseline,10:42,50,1928417,1000,1000,1000,32,10:42,0.5857,0.7387,0.0295,0.9973,0.6885,0.7968
unet_baseline,10:40,50,1928417,1000,1000,1000,32,10:40,0.6358,0.7774,0.0266,0.9977,0.7177,0.8478
unet_baseline,10:36,50,1928417,1000,1000,1000,32,10:36,0.6341,0.7761,0.0195,0.9977,0.7123,0.8525
unet_baseline,10:27,50,1928417,1000,1000,1000,32,10:27,0.5907,0.7427,0.0222,0.9972,0.653,0.861
unet_baseline,10:17,50,1928417,1000,1000,1000,32,10:17,0.5381,0.6997,0.0234,0.9962,0.5542,0.9487
unet_baseline,10:23,50,1928417,1000,1000,1000,32,10:23,0.6486,0.0243,0.9979,0.7544,0.8222,0.7868
unet_baseline,10:25,50,1928417,1000,1000,1000,32,10:25,0.5833,0.0561,0.9976,0.7501,0.7239,0.7368
unet_baseline,10:06,50,1928417,1000,1000,1000,32,10:06,0.5119,0.0419,0.9963,0.602,0.7737,0.6772
unet_baseline,10:03,50,1928417,1000,1000,1000,32,10:03,0.5196,0.0419,0.9964,0.6148,0.7703,0.6838
unet_baseline,10:07,50,1928417,1000,1000,1000,32,10:07,0.5318,0.044,0.9967,0.6443,0.7528,0.6943

Po:
unet_baseline,10:43,50,1928417,1000,1000,1000,32,10:43,0.5277,0.0514,0.9968,0.6753,0.707,0.6908
unet_baseline,10:43,50,1928417,1000,1000,1000,32,10:43,0.5277,0.0514,0.9968,0.6753,0.707,0.6908
unet_baseline,11:11,50,1928417,1000,1000,1000,32,11:11,0.5347,0.0388,0.9967,0.6485,0.753,0.6968
unet_baseline,10:43,50,1928417,1000,1000,1000,32,10:43,0.5347,0.0388,0.9967,0.6485,0.753,0.6968
unet_baseline,10:46,50,1928417,1000,1000,1000,32,10:46,0.5497,0.0397,0.9967,0.6403,0.7952,0.7094
unet_baseline,10:48,50,1928417,1000,1000,1000,32,10:48,0.5497,0.0397,0.9967,0.6403,0.7952,0.7094
unet_baseline,11:11,50,1928417,1000,1000,1000,32,11:11,0.4663,0.0435,0.9956,0.5389,0.7757,0.636
unet_baseline,11:16,50,1928417,1000,1000,1000,32,11:16,0.4663,0.0435,0.9956,0.5389,0.7757,0.636
unet_baseline,11:17,50,1928417,1000,1000,1000,32,11:17,0.4663,0.0435,0.9956,0.5389,0.7757,0.636

HPC aplinkoje pasiekti stabilaus rezultatų pakartojamumo nepavyko - iou metrika svyruoja tarp 0.4663 ir 0.5497. (regis kad ir pavyko)

LOKALIOJE KOMPIURTERIO APLINKOJE:
Lokalioje aplinkoje kodas buvo leidžiamas naudojant CPU resursus. Šių bandymų metu pavyko pasiekti rezultatų atkartojamumą panaudojus tik torch.manualSeed() funkciją, kuri leidžia kontroliuoti atsitiktinių skaičių generavimą, kuris naudojamas batch elementų parinkimui.

unet_baseline,1:27,1,1928417,128,128,128,8,1:27,0.003,0.3438,0.9921,0.0057,0.0064,0.006
unet_baseline,1:46,1,1928417,128,128,128,8,1:46,0.003,0.3438,0.9921,0.0057,0.0064,0.006
unet_baseline,1:36,1,1928417,128,128,128,8,1:36,0.003,0.3438,0.9921,0.0057,0.0064,0.006
unet_baseline,4:48,3,1928417,128,128,128,8,4:48,0.0025,0.2167,0.9962,0.0776,0.0026,0.0049
unet_baseline,4:54,3,1928417,128,128,128,8,4:54,0.0025,0.2167,0.9962,0.0776,0.0026,0.0049
unet_baseline,4:36,3,1928417,128,128,128,8,4:36,0.0025,0.2167,0.9962,0.0776,0.0026,0.0049








pabandyti deeplabv3 su 40k imgs - in progress - fail, 
pabandyti deeplabv3 su 10k imgs:
    test_metrics: {
        'iou': 0.2692911441522479,
        'avg_loss': 0.05997714757919312, 'precision': 0.2701774875687919,
        'recall': 0.9879642810922739, 'f1_score': 0.4243173765024665}
      - 53 min
pabandyti deeplabv3 su 20k imgs:
    .............
pabandyti kitus modelius - ?
    Normalus u-net (1548945 parametrai)

    time spent training the u-net NN 2:45
    name: u-net
    batch_size: 8
    num_epochs: 10
    fixed_train_size: 900
    fixed_valid_size: 100
    fixed_test_size: 100
    test_metrics: {'iou': 0.49679919137466305, 'avg_loss': 0.5802811980247498, 'precision': 0.747149733975171, 'recall': 0.5972053462940462, 'f1_score': 0.6638154192459201}
    
    time spent training the u-net NN 2:42
    name: u-net
    batch_size: 8
    num_epochs: 10
    fixed_train_size: 1000
    fixed_valid_size: 1000
    fixed_test_size: 1000
    test_metrics: {'iou': 0.2912425338605199, 'avg_loss': 0.4610980749130249, 'precision': 0.3369343065693431, 'recall': 0.6823019314150571, 'f1_score': 0.45110430646947686}

    time spent training the u-net NN 3:14
    name: u-net
    batch_size: 8
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 1000
    fixed_test_size: 100
    test_metrics: {'iou': 0.15313288265563516, 'avg_loss': 0.11767162084579467, 'precision': 0.1535620693493064, 'recall': 0.9820758379707519, 'f1_score': 0.2655945120617393}

    time spent training the unet NN 5:23
    Total number of trainable parameters: 3876737
    Total number of parameters (including non-trainable): 3876737
    name: unet
    batch_size: 16
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 128
    fixed_test_size: 1000
    test_metrics: {'iou': 0.2308126519928706, avg_loss': 0.09419668376445771, 'accuracy': 0.9848214721679688, 'precision': 0.23271742096440962, 'recall': 0.9657532030542254, 'f1_score': 0.37505732756183524}

    time spent training the unet NN 5:35
    Total number of trainable parameters: 3876737
    Total number of parameters (including non-trainable): 3876737
    name: unet
    batch_size: 32
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 128
    fixed_test_size: 1000
    test_metrics: {'iou': 0.1727027141705444, 'avg_loss': 0.09203365743160248, 'accuracy': 0.9776869201660157, 'precision': 0.17307626888011973, 'recall': 0.9876569173029637, 'f1_score': 0.2945379286389687}

    time spent training the unet NN 5:47
    Total number of trainable parameters: 3876737
    Total number of parameters (including non-trainable): 3876737
    None
    name: unet
    batch_size: 64
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 128
    fixed_test_size: 1000
    test_metrics: {'iou': 0.19163193593200947, 'avg_loss': 0.08729808926582336, 'accuracy': 0.9803778076171875, 'precision': 0.1921428481387639, 'recall': 0.9863142228549243, 'f1_score': 0.32162940611713076}

    time spent training the unet NN 4:26
    name: unet
    batch_size: 8
    num_epochs: 10
    fixed_train_size: 2000
    fixed_valid_size: 100
    fixed_test_size: 1000
    test_metrics: {'iou': 0.1796561294530183, 'avg_loss': 0.08400934487581253, 'accuracy': 61430.97394141704, 'precision': 0.17985916936274868, 'recall': 0.9937556619645399, 'f1_score': 0.30459067683786983}

    Epoch 10/10
    time spent training the unet NN 9:8
    name: unet
    batch_size: 8
    num_epochs: 10
    fixed_train_size: 4000
    fixed_valid_size: 100
    fixed_test_size: 1000
    test_metrics: {'iou': 0.2802218997409945, 'avg_loss': 0.05771894037723541, 'accuracy': 61020.98344626032, 'precision': 0.28125, 'recall': 0.9871230749320564, 'f1_score': 0.43777082675696616}


    time spent training the u-net NN 12:17
    name: u-net
    batch_size: 8
    num_epochs: 25
    fixed_train_size: 5000
    fixed_valid_size: 1000
    fixed_test_size: 100
    test_metrics: {'iou': 0.26463870341037377, 'avg_loss': 0.06807894617319107, 'precision': 0.26619483983415637, 'recall': 0.9783874724990294, 'f1_score': 0.4185206457729275}

    time spent training the u-net NN 27:03
    name: u-net
    batch_size: 8
    num_epochs: 25
    fixed_train_size: 10000
    fixed_valid_size: 1000
    fixed_test_size: 100
    test_metrics: {'iou': 0.3999087334075993, 'avg_loss': 0.06389929056167602, 'precision': 0.4059677089720008, 'recall': 0.9640222596091627, 'f1_score': 0.5713354361811261}

    ------------------------------------UNet_model---------------------------------------------------------------------------------
    time spent training the UNet_model NN 3:49
    Total number of trainable parameters: 1928417
    Total number of parameters (including non-trainable): 1928417
    name: UNet_model
    batch_size: 16
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 128
    fixed_test_size: 1000
    test_metrics: {'iou': 0.3780880703733235, 'avg_loss': 0.08107823789119721, 'accuracy': 0.9926805114746093, 'precision': 0.38684238452763114, 'recall': 0.9435259479746344, 'f1_score': 0.5487139443430485}
    
    time spent training the UNet_model NN 3:31
    Total number of trainable parameters: 1928417
    Total number of parameters (including non-trainable): 1928417
    None
    name: UNet_model
    batch_size: 32
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 128
    fixed_test_size: 1000
    test_metrics: {'iou': 0.354561556560129, 'avg_loss': 0.1486257767677307, 'accuracy': 0.9925491333007812, 'precision': 0.37479390806203716, 'recall': 0.8678659246796946, 'f1_score': 0.5235074845332657}

    Total number of trainable parameters: 1928417
    Total number of parameters (including non-trainable): 1928417
    name: UNet_model
    batch_size: 64
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 128
    fixed_test_size: 1000
    test_metrics: {'iou': 0.262050331080238, 'avg_loss': 0.09773539990186692, 'accuracy': 0.9869144439697266, 'precision': 0.26308037199096374, 'recall': 0.9852788921961951, 'f1_score': 0.4152771480293325}

    time spent training the UNet_model NN 3:37
    Total number of trainable parameters: 1928417
    Total number of parameters (including non-trainable): 1928417
    name: UNet_model
    batch_size: 128
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 128
    fixed_test_size: 1000
    test_metrics: {'iou': 0.3991515567119125, 'avg_loss': 0.09237680405378342, 'accuracy': 0.9931814575195312, 'precision': 0.40582236257501814, 'recall': 0.9604471334282386, 'f1_score': 0.570562287976782}
    test_metrics: {'iou': 0.32377196319774515, 'avg_loss': 0.06092556081712246, 'accuracy': 0.9903719329833984, 'precision': 0.32620866513699553, 'recall': 0.9774492040895562, 'f1_score': 0.48916576600645234}
    
    ------------------------------------imported_segm_model_unet_resnet34_imagenet---------------------------------------------------------------------------------
    model name: u-resnet34
    Total number of trainable parameters: 24,436,369
    Total number of parameters (including non-trainable): 24436369

    name: imported_segm_model_unet_resnet34_imagenet  NN 3:20
    batch_size: 8
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 100
    fixed_test_size: 1000
    test_metrics: {'iou': 0.21319603488360006, 'avg_loss': 0.07302746146917344, 'accuracy': 0.9826747894287109, 'precision': 0.2134060270589908, 'recall': 0.9954057202018894, 'f1_score': 0.3514618062596209}

    name: imported_segm_model_unet_resnet34_imagenet NN 3:04
    batch_size: 16
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 100
    fixed_test_size: 1000
    test_metrics: {'iou': 0.37073380147802887, 'avg_loss': 0.05202959671616554, 'accuracy': 0.9921718597412109, 'precision': 0.3738658783219638, 'recall': 0.9779021612527501, 'f1_score': 0.5409274960291717}

    name: imported_segm_model_unet_resnet34_imagenet NN 2:49
    batch_size: 32
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 100
    fixed_test_size: 1000
    test_metrics: {'iou': 0.4929160138955112, 'avg_loss': 0.07472627103328705, 'accuracy': 0.9954562377929688, 'precision': 0.509953842359325, 'recall': 0.9365212889866701, 'f1_score': 0.6603399110299989}

    name: imported_segm_model_unet_resnet34_imagenet 3:06
    batch_size: 64
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 100
    fixed_test_size: 1000
    test_metrics: {'iou': 0.4808410423505311, 'avg_loss': 0.058019647002220155, 'accuracy': 0.9950889587402344, 'precision': 0.4895149106673673, 'recall': 0.964459039730814, 'f1_score': 0.6494161474445557}
    time spent training the imported_segm_model_unet_resnet34_imagenet NN 3:03
    model name: u-resnet34
    batch_size: 128
    num_epochs: 25
    fixed_train_size: 1000
    fixed_valid_size: 128
    fixed_test_size: 1000
    test_metrics: {'iou': 0.5399790468283618, 'avg_loss': 0.14612704157829284, 'accuracy': 0.996448974609375, 'precision': 0.5812374994680625, 'recall': 0.8838164876407403, 'f1_score': 0.70128103098606}

    name: deeplabv3_resnet50
    batch_size: 8
    num_epochs: 25
    fixed_train_size: 3000
    fixed_valid_size: 1000
    fixed_test_size: 1000
    testing
    testing
    test_metrics: {'iou': 0.3407164869029276, 'avg_loss': 1.0744748339056969, 'precision': 0.39986437613019893, 'recall': 0.6972802522664564, 'f1_score': 0.5082603074270938}

    time spent training the deeplabv3_resnet50 NN 70:53
    name: deeplabv3_resnet50
    batch_size: 8
    num_epochs: 25
    fixed_train_size: 5000
    fixed_valid_size: 1000
    fixed_test_size: 1000

    test_metrics: {'iou': 0.37742148495115374, 'avg_loss': 0.038590526804327965, 'precision': 0.3789626967406122, 'recall': 0.9893393296233984, 'f1_score': 0.548011613111346}



    time spent training the unet NN 68:11 (laptop)
    Total number of trainable parameters: 1962625
    name: unet
    batch_size: 8
    num_epochs: 25
    fixed_train_size: 30
    fixed_valid_size: 10
    fixed_test_size: 100
    test_metrics: {'iou': 0.34046707802858706, 'avg_loss': 0.3100055009126663, 'precision': 0.3606055592322965, 'recall': 0.8590855340953882, 'f1_score': 0.5079827525929379}


    Epoch 25/25
    time spent training the unet NN 34:54
    name: unet
    batch_size: 16
    num_epochs: 25
    fixed_train_size: 6000
    fixed_valid_size: 100
    fixed_test_size: 1000
    test_metrics: {'iou': 0.3213127594579776, 'avg_loss': 0.042435967698693275, 'accuracy': 0.9900839233398437, 'precision': 0.3217882879584985, 'recall': 0.9954218972434321, 'f1_score': 0.48635382827875656}

    time spent training the unet NN 79:32
    name: unet
    batch_size: 16
    num_epochs: 25
    fixed_train_size: 12000
    fixed_valid_size: 100
    fixed_test_size: 1000
    test_metrics: {'iou': 0.28217106045771073, 'avg_loss': 0.047075256407260894, 'accuracy': 0.988030014038086, 'precision': 0.2823557958639887, 'recall': 0.9976866830594021, 'f1_score': 0.4401457327495459}











    lievas u-net - 150017 parametrai 

    unet su 10k imgs:
    test_metrics: {'iou': 0.13724088247561167,
    'avg_loss': 0.268336289525032, 'precision': 0.14151112004736213,
    'recall': 0.8197554031318752, 'f1_score': 0.24135763071910993}

    - 11 min

    unet su 20k imgs:
    test_metrics: {'iou': 0.043267072850978354,
    'avg_loss': 0.3578447771072388, 'precision': 0.043376306687477634,
    'recall': 0.9449980587550149, 'f1_score': 0.08294534348283546}

    geras u-net - 1548945


bash komandos:

scp deeplabv3_resnet50.zip jobr4333@uosis.mif.vu.lt:/stud3/2017/jobr4333/
scp jobr4333@uosis.mif.vu.lt:/stud3/2017/jobr4333/deeplabv3_resnet50.zip /c/Users/master/Documents
scp jobr4333@uosis.mif.vu.lt:/stud3/2017/jobr4333/best_model_weights.pth /c/Users/master/Documents
sacct -j 30901 --format=JobID,Start,End
cat "$(ls -1t | grep 'slurm-[0-9]\{5\}\.out' | head -n 1)"
find results -type f ! -name '*.pth' -print0 | zip -0 hpc_results.zip -

singularity build --sandbox /tmp/python docker://python:3.8
# mkdir ~/workdir
singularity exec -H ~/workdir:$HOME -w /tmp/python pip install paketas
singularity build python.sif /tmp/python
rm -rf /tmp/python

